{"ast":null,"code":"var _jsxFileName = \"D:\\\\Documents\\\\VSCode\\\\devconnector_new\\\\client\\\\src\\\\components\\\\profile\\\\ProfileGithub.js\";\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Spinner from '../layout/Spinner';\nimport { getGithubRepos } from '../../actions/profile';\n\nconst ProfileGithub = ({\n  getGithubRepos,\n  username,\n  repos\n}) => {\n  useEffect(() => {\n    getGithubRepos(username);\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"profile-github\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"text-primary my-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }\n  }, \"Github Repos\"), repos === null ? /*#__PURE__*/React.createElement(Spinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  }) : repos.map(repo => /*#__PURE__*/React.createElement(\"div\", {\n    key: repo.id,\n    className: \"repo bg-white p-1 my-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: repo.html_url,\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 17\n    }\n  }, repo.name)), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 15\n    }\n  }, repo.description)), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    className: \"badge badge-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 17\n    }\n  }, \"Stars: \", repo.stargazers_count), /*#__PURE__*/React.createElement(\"li\", {\n    className: \"badge badge-dark\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 17\n    }\n  }, \"Watchers: \", repo.watchers_count), /*#__PURE__*/React.createElement(\"li\", {\n    className: \"badge badge-light\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }\n  }, \"Forks: \", repo.forks_count))))));\n};\n\nProfileGithub.propTypes = {\n  getGithubRepos: PropTypes.func.isRequired,\n  repos: PropTypes.array.isRequired,\n  username: PropTypes.string.isRequired\n};\n\nconst mapStateToProps = state => ({\n  repos: state.profile.repos\n});\n\nexport default connect(mapStateToProps, {\n  getGithubRepos\n})(ProfileGithub);","map":{"version":3,"sources":["D:/Documents/VSCode/devconnector_new/client/src/components/profile/ProfileGithub.js"],"names":["React","useEffect","PropTypes","connect","Spinner","getGithubRepos","ProfileGithub","username","repos","map","repo","id","html_url","name","description","stargazers_count","watchers_count","forks_count","propTypes","func","isRequired","array","string","mapStateToProps","state","profile"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAASC,cAAT,QAA+B,uBAA/B;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAED,EAAAA,cAAF;AAAkBE,EAAAA,QAAlB;AAA4BC,EAAAA;AAA5B,CAAD,KAAyC;AAC7DP,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,cAAc,CAACE,QAAD,CAAd;AACD,GAFQ,EAEN,EAFM,CAAT;AAGA,sBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAI,IAAA,SAAS,EAAC,mBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAEGC,KAAK,KAAK,IAAV,gBACC,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,GAGCA,KAAK,CAACC,GAAN,CAAWC,IAAD,iBACR;AAAK,IAAA,GAAG,EAAEA,IAAI,CAACC,EAAf;AAAmB,IAAA,SAAS,EAAC,wBAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,IAAI,EAAED,IAAI,CAACE,QADb;AAEE,IAAA,MAAM,EAAC,QAFT;AAGE,IAAA,GAAG,EAAC,qBAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGF,IAAI,CAACG,IALR,CADF,CADF,eAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIH,IAAI,CAACI,WAAT,CAVF,CADF,eAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAI,IAAA,SAAS,EAAC,qBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACUJ,IAAI,CAACK,gBADf,CADF,eAIE;AAAI,IAAA,SAAS,EAAC,kBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACaL,IAAI,CAACM,cADlB,CAJF,eAOE;AAAI,IAAA,SAAS,EAAC,mBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAA0CN,IAAI,CAACO,WAA/C,CAPF,CADF,CAbF,CADF,CALJ,CADF;AAoCD,CAxCD;;AA0CAX,aAAa,CAACY,SAAd,GAA0B;AACxBb,EAAAA,cAAc,EAAEH,SAAS,CAACiB,IAAV,CAAeC,UADP;AAExBZ,EAAAA,KAAK,EAAEN,SAAS,CAACmB,KAAV,CAAgBD,UAFC;AAGxBb,EAAAA,QAAQ,EAAEL,SAAS,CAACoB,MAAV,CAAiBF;AAHH,CAA1B;;AAMA,MAAMG,eAAe,GAAIC,KAAD,KAAY;AAClChB,EAAAA,KAAK,EAAEgB,KAAK,CAACC,OAAN,CAAcjB;AADa,CAAZ,CAAxB;;AAIA,eAAeL,OAAO,CAACoB,eAAD,EAAkB;AAAElB,EAAAA;AAAF,CAAlB,CAAP,CAA6CC,aAA7C,CAAf","sourcesContent":["import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport Spinner from '../layout/Spinner';\r\nimport { getGithubRepos } from '../../actions/profile';\r\n\r\nconst ProfileGithub = ({ getGithubRepos, username, repos }) => {\r\n  useEffect(() => {\r\n    getGithubRepos(username);\r\n  }, []);\r\n  return (\r\n    <div className='profile-github'>\r\n      <h2 className='text-primary my-1'>Github Repos</h2>\r\n      {repos === null ? (\r\n        <Spinner />\r\n      ) : (\r\n        repos.map((repo) => (\r\n          <div key={repo.id} className='repo bg-white p-1 my-1'>\r\n            <div>\r\n              <h4>\r\n                <a\r\n                  href={repo.html_url}\r\n                  target='_blank'\r\n                  rel='noopener noreferrer'\r\n                >\r\n                  {repo.name}\r\n                </a>\r\n              </h4>\r\n              <p>{repo.description}</p>\r\n            </div>\r\n            <div>\r\n              <ul>\r\n                <li className='badge badge-primary'>\r\n                  Stars: {repo.stargazers_count}\r\n                </li>\r\n                <li className='badge badge-dark'>\r\n                  Watchers: {repo.watchers_count}\r\n                </li>\r\n                <li className='badge badge-light'>Forks: {repo.forks_count}</li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nProfileGithub.propTypes = {\r\n  getGithubRepos: PropTypes.func.isRequired,\r\n  repos: PropTypes.array.isRequired,\r\n  username: PropTypes.string.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  repos: state.profile.repos,\r\n});\r\n\r\nexport default connect(mapStateToProps, { getGithubRepos })(ProfileGithub);\r\n"]},"metadata":{},"sourceType":"module"}